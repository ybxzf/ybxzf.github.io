{"remainingRequest":"C:\\Users\\熊镇锋\\Desktop\\wit\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\熊镇锋\\Desktop\\wit\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\熊镇锋\\Desktop\\wit\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\熊镇锋\\Desktop\\wit\\src\\components\\module\\charts.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\熊镇锋\\Desktop\\wit\\src\\components\\module\\charts.vue","mtime":1704723600661},{"path":"C:\\Users\\熊镇锋\\Desktop\\wit\\babel.config.js","mtime":1702292139743},{"path":"C:\\Users\\熊镇锋\\Desktop\\wit\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\熊镇锋\\Desktop\\wit\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\Users\\熊镇锋\\Desktop\\wit\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\熊镇锋\\Desktop\\wit\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.for-each\";\nimport Vue from 'vue';\nimport \"echarts-gl\";\nvar that = new Vue();\nexport default {\n  /**\r\n   * 绘制3D柱图\r\n   * @param {string[]} xData 横坐标数组\r\n   * @param {string[]} list 坐标数据\r\n   * @returns\r\n   */\n  cylinderOption: function cylinderOption(xData, list) {\n    var maxNum = 2;\n    list.forEach(function (item) {\n      maxNum = item.value > maxNum ? Math.ceil(item.value) : maxNum;\n    });\n    var option = {\n      title: {\n        text: \"单位：台\",\n        top: \"2%\",\n        left: \"2%\",\n        textStyle: {\n          fontSize: that.$tools.getFitSize(1),\n          color: \"#fff\",\n          fontWeight: \"normal\"\n        }\n      },\n      legend: {\n        top: \"2%\",\n        icon: \"roundRect\",\n        textStyle: {\n          color: \"#97AFD8\",\n          fontSize: that.$tools.getFitSize(1)\n        },\n        itemWidth: that.$tools.getFitSize(1.28),\n        itemHeight: that.$tools.getFitSize(0.5),\n        itemStyle: {\n          color: \"#91CAFF\"\n        }\n      },\n      tooltip: {\n        trigger: \"item\",\n        axisPointer: {\n          type: \"shadow\"\n        },\n        formatter: \"{b} : {c}台\",\n        //显示的内容\n        backgroundColor: \"rgba(21, 45, 85, 0.6)\",\n        //背景颜色（此时为默认色）\n        textStyle: {\n          color: \"#fff\"\n        }\n      },\n      grid: {\n        top: \"15%\",\n        bottom: \"5%\",\n        right: \"3%\",\n        left: \"3%\",\n        containLabel: true\n      },\n      xAxis: {\n        type: \"category\",\n        axisTick: {\n          show: false\n        },\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: \"rgba(41, 121, 255, 0.2)\"\n          }\n        },\n        axisLabel: {\n          interval: 0,\n          color: \"#B5C5D4\",\n          margin: 14,\n          //边距\n          fontSize: that.$tools.getFitSize(0.86)\n        },\n        data: xData\n      },\n      yAxis: {\n        type: \"value\",\n        splitLine: {\n          show: false\n        },\n        axisTick: {\n          show: false\n        },\n        axisLine: {\n          //坐标轴线配置\n          show: true,\n          lineStyle: {\n            color: \"rgba(41, 121, 255, 0.2)\"\n          }\n        },\n        interval: maxNum <= 2 ? 1 : undefined,\n        //刻度值间隔\n        max: maxNum <= 2 ? maxNum : undefined,\n        //最大刻度值\n        axisLabel: {\n          //坐标轴值配置\n          formatter: function formatter(value) {\n            // 这里设置 Y 轴的单位\n            return value;\n          },\n          color: \"rgba(255, 255, 255, 0.6)\",\n          fontSize: that.$tools.getFitSize(0.86)\n        },\n        splitNumber: 4\n      },\n      color: [\"#2b9cf9\"],\n      series: [{\n        // name: \"圆柱部分\",\n        type: \"bar\",\n        //bar 柱状图\n        // barWidth: that.$tools.getFitSize(1.42),\n        barWidth: that.$tools.getFitSize(4),\n        barGap: \"0%\",\n        itemStyle: {\n          //柱状样式\n          normal: {\n            color: function color(params) {\n              var colorList = [{\n                top: \"rgba(186, 108, 238, 0.7)\",\n                bottom: \"rgba(186, 108, 238, 0.1)\"\n              }, {\n                top: \"rgba(60, 119, 228, 0.7)\",\n                bottom: \"rgba(60, 119, 228, 0.1)\"\n              }, {\n                top: \"rgba(198, 158, 71, 0.7)\",\n                bottom: \"rgba(198, 158, 71, 0.1)\"\n              }];\n              var colorItem = {\n                x: 0,\n                y: 0,\n                x2: 0,\n                y2: 1,\n                type: \"linear\",\n                global: false,\n                colorStops: [{\n                  //第一节下面\n                  offset: 0,\n                  color: colorList[params.dataIndex].top\n                }, {\n                  offset: 1,\n                  color: colorList[params.dataIndex].bottom\n                }]\n              };\n              return colorItem;\n            }\n          }\n        },\n        data: list\n      }, {\n        // name: \"顶部截面\",\n        type: \"pictorialBar\",\n        //pictorialBar 象形柱图\n        symbolSize: [that.$tools.getFitSize(4), 12],\n        //调整截面形状\n        symbolOffset: [0, -5],\n        z: 12,\n        symbolPosition: \"end\",\n        //图形的位置 'start'：图形边缘与柱子开始的地方内切。'end'：图形边缘与柱子结束的地方内切。'center'：图形在柱子里居中。\n        itemStyle: {\n          normal: {\n            color: function color(params) {\n              var colorList = [\"rgba(186, 108, 238)\", \"rgba(60, 119, 228)\", \"rgba(198, 158, 71)\"];\n              var colorItem = colorList[params.dataIndex];\n              return colorItem;\n            }\n          }\n        },\n        data: list\n      }, {\n        // name: \"底部截面\",\n        type: \"pictorialBar\",\n        //pictorialBar 象形柱图\n        symbolSize: [that.$tools.getFitSize(4), 12],\n        //调整截面形状\n        z: 12,\n        itemStyle: {\n          normal: {\n            color: function color(params) {\n              var colorList = [\"rgba(186, 108, 238, 0.5)\", \"rgba(60, 119, 228, 0.5)\", \"rgba(198, 158, 71, 0.5)\"];\n              var colorItem = colorList[params.dataIndex];\n              return colorItem;\n            }\n          }\n        },\n        // 实现数字展示在柱状图\n        label: {\n          show: true,\n          position: \"top\",\n          fontSize: that.$tools.getFitSize(1.28),\n          color: \"#2DB1EF\",\n          fontWeight: \"bold\",\n          offset: [0, -10],\n          formatter: \"{c}\" //添加单位\n        },\n        data: list\n      }]\n    };\n    return option;\n  },\n  // 生成扇形的曲面参数方程，用于 series-surface.parametricEquation\n  getParametricEquation: function getParametricEquation(startRatio, endRatio, isSelected, isHovered, k, h) {\n    // 计算\n    var midRatio = (startRatio + endRatio) / 2;\n    var startRadian = startRatio * Math.PI * 2;\n    var endRadian = endRatio * Math.PI * 2;\n    var midRadian = midRatio * Math.PI * 2;\n\n    // 如果只有一个扇形，则不实现选中效果。\n    // if (startRatio === 0 && endRatio === 1) {\n    //     isSelected = false;\n    // }\n    isSelected = false;\n    // 通过扇形内径/外径的值，换算出辅助参数 k（默认值 1/3）\n    k = typeof k !== 'undefined' ? k : 1 / 3;\n\n    // 计算选中效果分别在 x 轴、y 轴方向上的位移（未选中，则位移均为 0）\n    var offsetX = isSelected ? Math.sin(midRadian) * 0.1 : 0;\n    var offsetY = isSelected ? Math.cos(midRadian) * 0.1 : 0;\n\n    // 计算高亮效果的放大比例（未高亮，则比例为 1）\n    var hoverRate = isHovered ? 1.05 : 1;\n\n    // 返回曲面参数方程\n    return {\n      u: {\n        min: -Math.PI,\n        max: Math.PI * 3,\n        step: Math.PI / 32\n      },\n      v: {\n        min: 0,\n        max: Math.PI * 2,\n        step: Math.PI / 20\n      },\n      x: function x(u, v) {\n        if (u < startRadian) {\n          return offsetX + Math.cos(startRadian) * (1 + Math.cos(v) * k) * hoverRate;\n        }\n        if (u > endRadian) {\n          return offsetX + Math.cos(endRadian) * (1 + Math.cos(v) * k) * hoverRate;\n        }\n        return offsetX + Math.cos(u) * (1 + Math.cos(v) * k) * hoverRate;\n      },\n      y: function y(u, v) {\n        if (u < startRadian) {\n          return offsetY + Math.sin(startRadian) * (1 + Math.cos(v) * k) * hoverRate;\n        }\n        if (u > endRadian) {\n          return offsetY + Math.sin(endRadian) * (1 + Math.cos(v) * k) * hoverRate;\n        }\n        return offsetY + Math.sin(u) * (1 + Math.cos(v) * k) * hoverRate;\n      },\n      z: function z(u, v) {\n        if (u < -Math.PI * 0.5) {\n          return Math.sin(u);\n        }\n        if (u > Math.PI * 2.5) {\n          return Math.sin(u) * h * 0.1;\n        }\n        return Math.sin(v) > 0 ? 1 * h * 0.1 : -1;\n      }\n    };\n  },\n  // 生成模拟 3D 饼图的配置项\n  getPie3D: function getPie3D(pieData, internalDiameterRatio) {\n    var total = 0;\n    var series = [];\n    var sumValue = 0;\n    var startValue = 0;\n    var endValue = 0;\n    var legendData = [];\n    var k = typeof internalDiameterRatio !== \"undefined\" ? (1 - internalDiameterRatio) / (1 + internalDiameterRatio) : 1 / 3;\n\n    // 为每一个饼图数据，生成一个 series-surface 配置\n\n    for (var i = 0; i < pieData.length; i++) {\n      total += pieData[i].value;\n      sumValue += pieData[i].value;\n      var seriesItem = {\n        name: typeof pieData[i].name === \"undefined\" ? \"series\".concat(i) : pieData[i].name,\n        type: \"surface\",\n        parametric: true,\n        wireframe: {\n          show: false\n        },\n        pieData: pieData[i],\n        pieStatus: {\n          selected: false,\n          hovered: false,\n          k: k\n        }\n      };\n      if (typeof pieData[i].itemStyle != \"undefined\") {\n        var itemStyle = {};\n        typeof pieData[i].itemStyle.color != \"undefined\" ? itemStyle.color = pieData[i].itemStyle.color : null;\n        typeof pieData[i].itemStyle.opacity != \"undefined\" ? itemStyle.opacity = pieData[i].itemStyle.opacity : null;\n        seriesItem.itemStyle = itemStyle;\n      }\n      series.push(seriesItem);\n    }\n\n    // 使用上一次遍历时，计算出的数据和 sumValue，调用 getParametricEquation 函数，\n    // 向每个 series-surface 传入不同的参数方程 series-surface.parametricEquation，也就是实现每一个扇形。\n    for (var _i = 0; _i < series.length; _i++) {\n      endValue = startValue + series[_i].pieData.value;\n      series[_i].pieData.startRatio = startValue / sumValue;\n      series[_i].pieData.endRatio = endValue / sumValue;\n      series[_i].parametricEquation = this.getParametricEquation(series[_i].pieData.startRatio, series[_i].pieData.endRatio, true, false, 1, series[_i].pieData.value / total * 20);\n      startValue = endValue;\n      legendData.push(series[_i].name);\n    }\n\n    // 补充一个透明的圆环，用于支撑高亮功能的近似实现。\n    series.push({\n      name: \"mouseoutSeries\",\n      type: \"surface\",\n      parametric: true,\n      wireframe: {\n        show: false\n      },\n      itemStyle: {\n        opacity: 1,\n        color: \"rgba(18,236,252,.5)\"\n      },\n      parametricEquation: {\n        u: {\n          min: 0,\n          max: Math.PI * 2,\n          step: Math.PI / 20\n        },\n        v: {\n          min: 0,\n          max: Math.PI,\n          step: Math.PI / 1.4\n        },\n        x: function x(u, v) {\n          return Math.sin(v) * Math.sin(u) + Math.sin(u);\n        },\n        y: function y(u, v) {\n          return Math.sin(v) * Math.cos(u) + Math.cos(u);\n        },\n        z: function z(u, v) {\n          return Math.cos(v) > 0 ? 0.1 : -0.1;\n        }\n      }\n    });\n    // 准备待返回的配置项，把准备好的 legendData、series 传入。\n    var option = {\n      // animation: false,\n      legend: {\n        //分类标识\n        show: true,\n        left: 'center',\n        bottom: \"10\",\n        itemGap: 20,\n        data: pieData,\n        textStyle: {\n          color: 'white'\n        }\n        // formatter: function (params) {\n        //   for (let i = 0; i < pieData.length; i++) {\n        //     if (pieData[i].name === params) {\n        //       return params + ' : ' + (pieData[i].value / total * 100).toFixed(2) + '%'\n        //     }\n        //   }\n        // }\n      },\n      tooltip: {\n        //鼠标指向时提示\n        backgroundColor: \"rgba(21, 45, 85, 0.6)\",\n        //背景颜色（此时为默认色）\n        textStyle: {\n          color: 'white'\n        },\n        formatter: function formatter(params) {\n          if (params.seriesName !== \"mouseoutSeries\") {\n            return \"\".concat(params.seriesName, \"<br/><span style=\\\"display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:\").concat(params.color, \";\\\"></span>\").concat(total == 0 ? params.seriesName == '合格' ? 100 : 0 : (option.series[params.seriesIndex].pieData.value / total * 100).toFixed(2), \"%\");\n          }\n        }\n      },\n      xAxis3D: {\n        min: -1.3,\n        max: 1.3\n      },\n      yAxis3D: {\n        min: -1.3,\n        max: 1.3\n      },\n      zAxis3D: {\n        min: -1.3,\n        max: 1.3\n      },\n      grid3D: {\n        show: false,\n        boxHeight: 10,\n        // top: '30%',\n        left: \"center\",\n        bottom: \"center\",\n        viewControl: {\n          //3d效果可以放大、旋转等，请自己去查看官方配置\n          // alpha: 20,\n          // beta: 40,\n          rotateSensitivity: 0,\n          zoomSensitivity: 0,\n          panSensitivity: 0,\n          autoRotate: true,\n          autoRotateSpeed: 72\n          // autoRotateAfterStill: 10\n        }\n      },\n      series: series\n    };\n    return option;\n  }\n};",{"version":3,"names":["Vue","that","cylinderOption","xData","list","maxNum","forEach","item","value","Math","ceil","option","title","text","top","left","textStyle","fontSize","$tools","getFitSize","color","fontWeight","legend","icon","itemWidth","itemHeight","itemStyle","tooltip","trigger","axisPointer","type","formatter","backgroundColor","grid","bottom","right","containLabel","xAxis","axisTick","show","axisLine","lineStyle","axisLabel","interval","margin","data","yAxis","splitLine","undefined","max","splitNumber","series","barWidth","barGap","normal","params","colorList","colorItem","x","y","x2","y2","global","colorStops","offset","dataIndex","symbolSize","symbolOffset","z","symbolPosition","label","position","getParametricEquation","startRatio","endRatio","isSelected","isHovered","k","h","midRatio","startRadian","PI","endRadian","midRadian","offsetX","sin","offsetY","cos","hoverRate","u","min","step","v","getPie3D","pieData","internalDiameterRatio","total","sumValue","startValue","endValue","legendData","i","length","seriesItem","name","concat","parametric","wireframe","pieStatus","selected","hovered","opacity","push","parametricEquation","itemGap","seriesName","seriesIndex","toFixed","xAxis3D","yAxis3D","zAxis3D","grid3D","boxHeight","viewControl","rotateSensitivity","zoomSensitivity","panSensitivity","autoRotate","autoRotateSpeed"],"sources":["src/components/module/charts.vue"],"sourcesContent":["<script>\r\nimport Vue from 'vue';\r\nimport \"echarts-gl\";\r\nconst that = new Vue()\r\nexport default {\r\n  /**\r\n   * 绘制3D柱图\r\n   * @param {string[]} xData 横坐标数组\r\n   * @param {string[]} list 坐标数据\r\n   * @returns\r\n   */\r\n  cylinderOption(xData, list) {\r\n    let maxNum = 2;\r\n    list.forEach(item => {\r\n      maxNum = item.value > maxNum ? Math.ceil(item.value) : maxNum;\r\n    })\r\n    const option = {\r\n      title: {\r\n        text: \"单位：台\",\r\n        top: \"2%\",\r\n        left: \"2%\",\r\n        textStyle: {\r\n          fontSize: that.$tools.getFitSize(1),\r\n          color: \"#fff\",\r\n          fontWeight: \"normal\",\r\n        },\r\n      },\r\n      legend: {\r\n        top: \"2%\",\r\n        icon: \"roundRect\",\r\n        textStyle: {\r\n          color: \"#97AFD8\",\r\n          fontSize: that.$tools.getFitSize(1),\r\n        },\r\n        itemWidth: that.$tools.getFitSize(1.28),\r\n        itemHeight: that.$tools.getFitSize(0.5),\r\n        itemStyle: {\r\n          color: \"#91CAFF\",\r\n        },\r\n      },\r\n      tooltip: {\r\n        trigger: \"item\",\r\n        axisPointer: {\r\n          type: \"shadow\",\r\n        },\r\n        formatter: \"{b} : {c}台\", //显示的内容\r\n        backgroundColor: \"rgba(21, 45, 85, 0.6)\", //背景颜色（此时为默认色）\r\n        textStyle: {\r\n          color: \"#fff\",\r\n        },\r\n      },\r\n      grid: {\r\n        top: \"15%\",\r\n        bottom: \"5%\",\r\n        right: \"3%\",\r\n        left: \"3%\",\r\n        containLabel: true,\r\n      },\r\n      xAxis: {\r\n        type: \"category\",\r\n        axisTick: {\r\n          show: false,\r\n        },\r\n        axisLine: {\r\n          show: true,\r\n          lineStyle: {\r\n            color: \"rgba(41, 121, 255, 0.2)\",\r\n          },\r\n        },\r\n        axisLabel: {\r\n          interval: 0,\r\n          color: \"#B5C5D4\",\r\n          margin: 14, //边距\r\n          fontSize: that.$tools.getFitSize(0.86),\r\n        },\r\n        data: xData,\r\n      },\r\n      yAxis: {\r\n        type: \"value\",\r\n        splitLine: {\r\n          show: false,\r\n        },\r\n        axisTick: {\r\n          show: false,\r\n        },\r\n        axisLine: { //坐标轴线配置\r\n          show: true,\r\n          lineStyle: {\r\n            color: \"rgba(41, 121, 255, 0.2)\",\r\n          },\r\n        },\r\n        interval: maxNum <= 2 ? 1 : undefined, //刻度值间隔\r\n        max: maxNum <= 2 ? maxNum : undefined,  //最大刻度值\r\n        axisLabel: {  //坐标轴值配置\r\n          formatter: function (value) {  // 这里设置 Y 轴的单位\r\n            return value;\r\n          },\r\n          color: \"rgba(255, 255, 255, 0.6)\",\r\n          fontSize: that.$tools.getFitSize(0.86),\r\n        },\r\n        splitNumber: 4,\r\n      },\r\n      color: [\"#2b9cf9\"],\r\n      series: [\r\n        {\r\n          // name: \"圆柱部分\",\r\n          type: \"bar\", //bar 柱状图\r\n          // barWidth: that.$tools.getFitSize(1.42),\r\n          barWidth: that.$tools.getFitSize(4),\r\n          barGap: \"0%\",\r\n          itemStyle: {\r\n            //柱状样式\r\n            normal: {\r\n              color: function (params) {\r\n                let colorList = [\r\n                  {\r\n                    top: \"rgba(186, 108, 238, 0.7)\",\r\n                    bottom: \"rgba(186, 108, 238, 0.1)\",\r\n                  },\r\n                  {\r\n                    top: \"rgba(60, 119, 228, 0.7)\",\r\n                    bottom: \"rgba(60, 119, 228, 0.1)\",\r\n                  },\r\n                  {\r\n                    top: \"rgba(198, 158, 71, 0.7)\",\r\n                    bottom: \"rgba(198, 158, 71, 0.1)\",\r\n                  },\r\n                ];\r\n                let colorItem = {\r\n                  x: 0,\r\n                  y: 0,\r\n                  x2: 0,\r\n                  y2: 1,\r\n                  type: \"linear\",\r\n                  global: false,\r\n                  colorStops: [\r\n                    {\r\n                      //第一节下面\r\n                      offset: 0,\r\n                      color: colorList[params.dataIndex].top,\r\n                    },\r\n                    {\r\n                      offset: 1,\r\n                      color: colorList[params.dataIndex].bottom,\r\n                    },\r\n                  ],\r\n                };\r\n                return colorItem;\r\n              },\r\n            },\r\n          },\r\n          data: list,\r\n        },\r\n        {\r\n          // name: \"顶部截面\",\r\n          type: \"pictorialBar\", //pictorialBar 象形柱图\r\n          symbolSize: [that.$tools.getFitSize(4), 12], //调整截面形状\r\n          symbolOffset: [0, -5],\r\n          z: 12,\r\n          symbolPosition: \"end\", //图形的位置 'start'：图形边缘与柱子开始的地方内切。'end'：图形边缘与柱子结束的地方内切。'center'：图形在柱子里居中。\r\n          itemStyle: {\r\n            normal: {\r\n              color: function (params) {\r\n                let colorList = [\r\n                  \"rgba(186, 108, 238)\",\r\n                  \"rgba(60, 119, 228)\",\r\n                  \"rgba(198, 158, 71)\",\r\n                ];\r\n                let colorItem = colorList[params.dataIndex];\r\n                return colorItem;\r\n              },\r\n            },\r\n          },\r\n          data: list,\r\n        },\r\n        {\r\n          // name: \"底部截面\",\r\n          type: \"pictorialBar\", //pictorialBar 象形柱图\r\n          symbolSize: [that.$tools.getFitSize(4), 12], //调整截面形状\r\n          z: 12,\r\n          itemStyle: {\r\n            normal: {\r\n              color: function (params) {\r\n                let colorList = [\r\n                  \"rgba(186, 108, 238, 0.5)\",\r\n                  \"rgba(60, 119, 228, 0.5)\",\r\n                  \"rgba(198, 158, 71, 0.5)\",\r\n                ];\r\n                let colorItem = colorList[params.dataIndex];\r\n                return colorItem;\r\n              },\r\n            },\r\n          },\r\n          // 实现数字展示在柱状图\r\n          label: {\r\n            show: true,\r\n            position: \"top\",\r\n            fontSize: that.$tools.getFitSize(1.28),\r\n            color: \"#2DB1EF\",\r\n            fontWeight: \"bold\",\r\n            offset: [0, -10],\r\n            formatter: \"{c}\", //添加单位\r\n          },\r\n          data: list,\r\n        },\r\n      ],\r\n    };\r\n    return option;\r\n  },\r\n\r\n  // 生成扇形的曲面参数方程，用于 series-surface.parametricEquation\r\n  getParametricEquation(startRatio, endRatio, isSelected, isHovered, k, h) {\r\n    // 计算\r\n    let midRatio = (startRatio + endRatio) / 2;\r\n\r\n    let startRadian = startRatio * Math.PI * 2;\r\n    let endRadian = endRatio * Math.PI * 2;\r\n    let midRadian = midRatio * Math.PI * 2;\r\n\r\n    // 如果只有一个扇形，则不实现选中效果。\r\n    // if (startRatio === 0 && endRatio === 1) {\r\n    //     isSelected = false;\r\n    // }\r\n    isSelected = false;\r\n    // 通过扇形内径/外径的值，换算出辅助参数 k（默认值 1/3）\r\n    k = typeof k !== 'undefined' ? k : 1 / 3;\r\n\r\n    // 计算选中效果分别在 x 轴、y 轴方向上的位移（未选中，则位移均为 0）\r\n    let offsetX = isSelected ? Math.sin(midRadian) * 0.1 : 0;\r\n    let offsetY = isSelected ? Math.cos(midRadian) * 0.1 : 0;\r\n\r\n    // 计算高亮效果的放大比例（未高亮，则比例为 1）\r\n    let hoverRate = isHovered ? 1.05 : 1;\r\n\r\n    // 返回曲面参数方程\r\n    return {\r\n      u: {\r\n        min: -Math.PI,\r\n        max: Math.PI * 3,\r\n        step: Math.PI / 32,\r\n      },\r\n\r\n      v: {\r\n        min: 0,\r\n        max: Math.PI * 2,\r\n        step: Math.PI / 20,\r\n      },\r\n\r\n      x: function (u, v) {\r\n        if (u < startRadian) {\r\n          return offsetX + Math.cos(startRadian) * (1 + Math.cos(v) * k) * hoverRate;\r\n        }\r\n        if (u > endRadian) {\r\n          return offsetX + Math.cos(endRadian) * (1 + Math.cos(v) * k) * hoverRate;\r\n        }\r\n        return offsetX + Math.cos(u) * (1 + Math.cos(v) * k) * hoverRate;\r\n      },\r\n\r\n      y: function (u, v) {\r\n        if (u < startRadian) {\r\n          return offsetY + Math.sin(startRadian) * (1 + Math.cos(v) * k) * hoverRate;\r\n        }\r\n        if (u > endRadian) {\r\n          return offsetY + Math.sin(endRadian) * (1 + Math.cos(v) * k) * hoverRate;\r\n        }\r\n        return offsetY + Math.sin(u) * (1 + Math.cos(v) * k) * hoverRate;\r\n      },\r\n\r\n      z: function (u, v) {\r\n        if (u < -Math.PI * 0.5) {\r\n          return Math.sin(u);\r\n        }\r\n        if (u > Math.PI * 2.5) {\r\n          return Math.sin(u) * h * 0.1;\r\n        }\r\n        return Math.sin(v) > 0 ? 1 * h * 0.1 : -1;\r\n      },\r\n    };\r\n  },\r\n\r\n  // 生成模拟 3D 饼图的配置项\r\n  getPie3D(pieData, internalDiameterRatio) {\r\n    let total = 0;\r\n    let series = [];\r\n    let sumValue = 0;\r\n    let startValue = 0;\r\n    let endValue = 0;\r\n    let legendData = [];\r\n    let k =\r\n      typeof internalDiameterRatio !== \"undefined\"\r\n        ? (1 - internalDiameterRatio) / (1 + internalDiameterRatio)\r\n        : 1 / 3;\r\n\r\n    // 为每一个饼图数据，生成一个 series-surface 配置\r\n\r\n    for (let i = 0; i < pieData.length; i++) {\r\n      total += pieData[i].value\r\n      sumValue += pieData[i].value;\r\n\r\n      let seriesItem = {\r\n        name:\r\n          typeof pieData[i].name === \"undefined\"\r\n            ? `series${i}`\r\n            : pieData[i].name,\r\n        type: \"surface\",\r\n        parametric: true,\r\n        wireframe: {\r\n          show: false,\r\n        },\r\n        pieData: pieData[i],\r\n        pieStatus: {\r\n          selected: false,\r\n          hovered: false,\r\n          k: k,\r\n        },\r\n      };\r\n\r\n      if (typeof pieData[i].itemStyle != \"undefined\") {\r\n        let itemStyle = {};\r\n\r\n        typeof pieData[i].itemStyle.color != \"undefined\"\r\n          ? (itemStyle.color = pieData[i].itemStyle.color)\r\n          : null;\r\n        typeof pieData[i].itemStyle.opacity != \"undefined\"\r\n          ? (itemStyle.opacity = pieData[i].itemStyle.opacity)\r\n          : null;\r\n\r\n        seriesItem.itemStyle = itemStyle;\r\n      }\r\n      series.push(seriesItem);\r\n    }\r\n\r\n    // 使用上一次遍历时，计算出的数据和 sumValue，调用 getParametricEquation 函数，\r\n    // 向每个 series-surface 传入不同的参数方程 series-surface.parametricEquation，也就是实现每一个扇形。\r\n    for (let i = 0; i < series.length; i++) {\r\n      endValue = startValue + series[i].pieData.value;\r\n\r\n      series[i].pieData.startRatio = startValue / sumValue;\r\n      series[i].pieData.endRatio = endValue / sumValue;\r\n      series[i].parametricEquation = this.getParametricEquation(\r\n        series[i].pieData.startRatio,\r\n        series[i].pieData.endRatio,\r\n        true,\r\n        false,\r\n        1,\r\n        series[i].pieData.value / total * 20\r\n      );\r\n\r\n      startValue = endValue;\r\n\r\n      legendData.push(series[i].name);\r\n    }\r\n\r\n    // 补充一个透明的圆环，用于支撑高亮功能的近似实现。\r\n    series.push({\r\n      name: \"mouseoutSeries\",\r\n      type: \"surface\",\r\n      parametric: true,\r\n      wireframe: {\r\n        show: false,\r\n      },\r\n      itemStyle: {\r\n        opacity: 1,\r\n        color: \"rgba(18,236,252,.5)\",\r\n      },\r\n      parametricEquation: {\r\n        u: {\r\n          min: 0,\r\n          max: Math.PI * 2,\r\n          step: Math.PI / 20,\r\n        },\r\n        v: {\r\n          min: 0,\r\n          max: Math.PI,\r\n          step: Math.PI / 1.4,\r\n        },\r\n        x: function (u, v) {\r\n          return Math.sin(v) * Math.sin(u) + Math.sin(u);\r\n        },\r\n        y: function (u, v) {\r\n          return Math.sin(v) * Math.cos(u) + Math.cos(u);\r\n        },\r\n        z: function (u, v) {\r\n          return Math.cos(v) > 0 ? 0.1 : -0.1;\r\n        },\r\n      },\r\n    });\r\n    // 准备待返回的配置项，把准备好的 legendData、series 传入。\r\n    let option = {\r\n      // animation: false,\r\n      legend: { //分类标识\r\n        show: true,\r\n        left: 'center',\r\n        bottom: \"10\",\r\n        itemGap: 20,\r\n        data: pieData,\r\n        textStyle: {\r\n          color: 'white'\r\n        },\r\n        // formatter: function (params) {\r\n        //   for (let i = 0; i < pieData.length; i++) {\r\n        //     if (pieData[i].name === params) {\r\n        //       return params + ' : ' + (pieData[i].value / total * 100).toFixed(2) + '%'\r\n        //     }\r\n        //   }\r\n        // }\r\n      },\r\n      tooltip: { //鼠标指向时提示\r\n        backgroundColor: \"rgba(21, 45, 85, 0.6)\", //背景颜色（此时为默认色）\r\n        textStyle: {\r\n          color: 'white'\r\n        },\r\n        formatter: (params) => {\r\n          if (params.seriesName !== \"mouseoutSeries\") {\r\n            return `${params.seriesName\r\n              }<br/><span style=\"display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:${params.color\r\n              };\"></span>${total == 0 ? \r\n                params.seriesName=='合格' ? 100 : 0 \r\n                :\r\n                (option.series[params.seriesIndex].pieData.value / total * 100).toFixed(2)\r\n              }%`;\r\n          }\r\n        },\r\n      },\r\n      xAxis3D: {\r\n        min: -1.3,\r\n        max: 1.3,\r\n      },\r\n      yAxis3D: {\r\n        min: -1.3,\r\n        max: 1.3,\r\n      },\r\n      zAxis3D: {\r\n        min: -1.3,\r\n        max: 1.3,\r\n      },\r\n      grid3D: {\r\n        show: false,\r\n        boxHeight: 10,\r\n        // top: '30%',\r\n        left: \"center\",\r\n        bottom: \"center\",\r\n        viewControl: {\r\n          //3d效果可以放大、旋转等，请自己去查看官方配置\r\n          // alpha: 20,\r\n          // beta: 40,\r\n          rotateSensitivity: 0,\r\n          zoomSensitivity: 0,\r\n          panSensitivity: 0,\r\n          autoRotate: true,\r\n          autoRotateSpeed: 72,\r\n          // autoRotateAfterStill: 10\r\n        },\r\n      },\r\n      series: series,\r\n    };\r\n    return option;\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";;;AACA,OAAAA,GAAA;AACA;AACA,IAAAC,IAAA,OAAAD,GAAA;AACA;EACA;AACA;AACA;AACA;AACA;AACA;EACAE,cAAA,WAAAA,eAAAC,KAAA,EAAAC,IAAA;IACA,IAAAC,MAAA;IACAD,IAAA,CAAAE,OAAA,WAAAC,IAAA;MACAF,MAAA,GAAAE,IAAA,CAAAC,KAAA,GAAAH,MAAA,GAAAI,IAAA,CAAAC,IAAA,CAAAH,IAAA,CAAAC,KAAA,IAAAH,MAAA;IACA;IACA,IAAAM,MAAA;MACAC,KAAA;QACAC,IAAA;QACAC,GAAA;QACAC,IAAA;QACAC,SAAA;UACAC,QAAA,EAAAhB,IAAA,CAAAiB,MAAA,CAAAC,UAAA;UACAC,KAAA;UACAC,UAAA;QACA;MACA;MACAC,MAAA;QACAR,GAAA;QACAS,IAAA;QACAP,SAAA;UACAI,KAAA;UACAH,QAAA,EAAAhB,IAAA,CAAAiB,MAAA,CAAAC,UAAA;QACA;QACAK,SAAA,EAAAvB,IAAA,CAAAiB,MAAA,CAAAC,UAAA;QACAM,UAAA,EAAAxB,IAAA,CAAAiB,MAAA,CAAAC,UAAA;QACAO,SAAA;UACAN,KAAA;QACA;MACA;MACAO,OAAA;QACAC,OAAA;QACAC,WAAA;UACAC,IAAA;QACA;QACAC,SAAA;QAAA;QACAC,eAAA;QAAA;QACAhB,SAAA;UACAI,KAAA;QACA;MACA;MACAa,IAAA;QACAnB,GAAA;QACAoB,MAAA;QACAC,KAAA;QACApB,IAAA;QACAqB,YAAA;MACA;MACAC,KAAA;QACAP,IAAA;QACAQ,QAAA;UACAC,IAAA;QACA;QACAC,QAAA;UACAD,IAAA;UACAE,SAAA;YACArB,KAAA;UACA;QACA;QACAsB,SAAA;UACAC,QAAA;UACAvB,KAAA;UACAwB,MAAA;UAAA;UACA3B,QAAA,EAAAhB,IAAA,CAAAiB,MAAA,CAAAC,UAAA;QACA;QACA0B,IAAA,EAAA1C;MACA;MACA2C,KAAA;QACAhB,IAAA;QACAiB,SAAA;UACAR,IAAA;QACA;QACAD,QAAA;UACAC,IAAA;QACA;QACAC,QAAA;UAAA;UACAD,IAAA;UACAE,SAAA;YACArB,KAAA;UACA;QACA;QACAuB,QAAA,EAAAtC,MAAA,YAAA2C,SAAA;QAAA;QACAC,GAAA,EAAA5C,MAAA,QAAAA,MAAA,GAAA2C,SAAA;QAAA;QACAN,SAAA;UAAA;UACAX,SAAA,WAAAA,UAAAvB,KAAA;YAAA;YACA,OAAAA,KAAA;UACA;UACAY,KAAA;UACAH,QAAA,EAAAhB,IAAA,CAAAiB,MAAA,CAAAC,UAAA;QACA;QACA+B,WAAA;MACA;MACA9B,KAAA;MACA+B,MAAA,GACA;QACA;QACArB,IAAA;QAAA;QACA;QACAsB,QAAA,EAAAnD,IAAA,CAAAiB,MAAA,CAAAC,UAAA;QACAkC,MAAA;QACA3B,SAAA;UACA;UACA4B,MAAA;YACAlC,KAAA,WAAAA,MAAAmC,MAAA;cACA,IAAAC,SAAA,IACA;gBACA1C,GAAA;gBACAoB,MAAA;cACA,GACA;gBACApB,GAAA;gBACAoB,MAAA;cACA,GACA;gBACApB,GAAA;gBACAoB,MAAA;cACA,EACA;cACA,IAAAuB,SAAA;gBACAC,CAAA;gBACAC,CAAA;gBACAC,EAAA;gBACAC,EAAA;gBACA/B,IAAA;gBACAgC,MAAA;gBACAC,UAAA,GACA;kBACA;kBACAC,MAAA;kBACA5C,KAAA,EAAAoC,SAAA,CAAAD,MAAA,CAAAU,SAAA,EAAAnD;gBACA,GACA;kBACAkD,MAAA;kBACA5C,KAAA,EAAAoC,SAAA,CAAAD,MAAA,CAAAU,SAAA,EAAA/B;gBACA;cAEA;cACA,OAAAuB,SAAA;YACA;UACA;QACA;QACAZ,IAAA,EAAAzC;MACA,GACA;QACA;QACA0B,IAAA;QAAA;QACAoC,UAAA,GAAAjE,IAAA,CAAAiB,MAAA,CAAAC,UAAA;QAAA;QACAgD,YAAA;QACAC,CAAA;QACAC,cAAA;QAAA;QACA3C,SAAA;UACA4B,MAAA;YACAlC,KAAA,WAAAA,MAAAmC,MAAA;cACA,IAAAC,SAAA,IACA,uBACA,sBACA,qBACA;cACA,IAAAC,SAAA,GAAAD,SAAA,CAAAD,MAAA,CAAAU,SAAA;cACA,OAAAR,SAAA;YACA;UACA;QACA;QACAZ,IAAA,EAAAzC;MACA,GACA;QACA;QACA0B,IAAA;QAAA;QACAoC,UAAA,GAAAjE,IAAA,CAAAiB,MAAA,CAAAC,UAAA;QAAA;QACAiD,CAAA;QACA1C,SAAA;UACA4B,MAAA;YACAlC,KAAA,WAAAA,MAAAmC,MAAA;cACA,IAAAC,SAAA,IACA,4BACA,2BACA,0BACA;cACA,IAAAC,SAAA,GAAAD,SAAA,CAAAD,MAAA,CAAAU,SAAA;cACA,OAAAR,SAAA;YACA;UACA;QACA;QACA;QACAa,KAAA;UACA/B,IAAA;UACAgC,QAAA;UACAtD,QAAA,EAAAhB,IAAA,CAAAiB,MAAA,CAAAC,UAAA;UACAC,KAAA;UACAC,UAAA;UACA2C,MAAA;UACAjC,SAAA;QACA;QACAc,IAAA,EAAAzC;MACA;IAEA;IACA,OAAAO,MAAA;EACA;EAEA;EACA6D,qBAAA,WAAAA,sBAAAC,UAAA,EAAAC,QAAA,EAAAC,UAAA,EAAAC,SAAA,EAAAC,CAAA,EAAAC,CAAA;IACA;IACA,IAAAC,QAAA,IAAAN,UAAA,GAAAC,QAAA;IAEA,IAAAM,WAAA,GAAAP,UAAA,GAAAhE,IAAA,CAAAwE,EAAA;IACA,IAAAC,SAAA,GAAAR,QAAA,GAAAjE,IAAA,CAAAwE,EAAA;IACA,IAAAE,SAAA,GAAAJ,QAAA,GAAAtE,IAAA,CAAAwE,EAAA;;IAEA;IACA;IACA;IACA;IACAN,UAAA;IACA;IACAE,CAAA,UAAAA,CAAA,mBAAAA,CAAA;;IAEA;IACA,IAAAO,OAAA,GAAAT,UAAA,GAAAlE,IAAA,CAAA4E,GAAA,CAAAF,SAAA;IACA,IAAAG,OAAA,GAAAX,UAAA,GAAAlE,IAAA,CAAA8E,GAAA,CAAAJ,SAAA;;IAEA;IACA,IAAAK,SAAA,GAAAZ,SAAA;;IAEA;IACA;MACAa,CAAA;QACAC,GAAA,GAAAjF,IAAA,CAAAwE,EAAA;QACAhC,GAAA,EAAAxC,IAAA,CAAAwE,EAAA;QACAU,IAAA,EAAAlF,IAAA,CAAAwE,EAAA;MACA;MAEAW,CAAA;QACAF,GAAA;QACAzC,GAAA,EAAAxC,IAAA,CAAAwE,EAAA;QACAU,IAAA,EAAAlF,IAAA,CAAAwE,EAAA;MACA;MAEAvB,CAAA,WAAAA,EAAA+B,CAAA,EAAAG,CAAA;QACA,IAAAH,CAAA,GAAAT,WAAA;UACA,OAAAI,OAAA,GAAA3E,IAAA,CAAA8E,GAAA,CAAAP,WAAA,SAAAvE,IAAA,CAAA8E,GAAA,CAAAK,CAAA,IAAAf,CAAA,IAAAW,SAAA;QACA;QACA,IAAAC,CAAA,GAAAP,SAAA;UACA,OAAAE,OAAA,GAAA3E,IAAA,CAAA8E,GAAA,CAAAL,SAAA,SAAAzE,IAAA,CAAA8E,GAAA,CAAAK,CAAA,IAAAf,CAAA,IAAAW,SAAA;QACA;QACA,OAAAJ,OAAA,GAAA3E,IAAA,CAAA8E,GAAA,CAAAE,CAAA,SAAAhF,IAAA,CAAA8E,GAAA,CAAAK,CAAA,IAAAf,CAAA,IAAAW,SAAA;MACA;MAEA7B,CAAA,WAAAA,EAAA8B,CAAA,EAAAG,CAAA;QACA,IAAAH,CAAA,GAAAT,WAAA;UACA,OAAAM,OAAA,GAAA7E,IAAA,CAAA4E,GAAA,CAAAL,WAAA,SAAAvE,IAAA,CAAA8E,GAAA,CAAAK,CAAA,IAAAf,CAAA,IAAAW,SAAA;QACA;QACA,IAAAC,CAAA,GAAAP,SAAA;UACA,OAAAI,OAAA,GAAA7E,IAAA,CAAA4E,GAAA,CAAAH,SAAA,SAAAzE,IAAA,CAAA8E,GAAA,CAAAK,CAAA,IAAAf,CAAA,IAAAW,SAAA;QACA;QACA,OAAAF,OAAA,GAAA7E,IAAA,CAAA4E,GAAA,CAAAI,CAAA,SAAAhF,IAAA,CAAA8E,GAAA,CAAAK,CAAA,IAAAf,CAAA,IAAAW,SAAA;MACA;MAEApB,CAAA,WAAAA,EAAAqB,CAAA,EAAAG,CAAA;QACA,IAAAH,CAAA,IAAAhF,IAAA,CAAAwE,EAAA;UACA,OAAAxE,IAAA,CAAA4E,GAAA,CAAAI,CAAA;QACA;QACA,IAAAA,CAAA,GAAAhF,IAAA,CAAAwE,EAAA;UACA,OAAAxE,IAAA,CAAA4E,GAAA,CAAAI,CAAA,IAAAX,CAAA;QACA;QACA,OAAArE,IAAA,CAAA4E,GAAA,CAAAO,CAAA,YAAAd,CAAA;MACA;IACA;EACA;EAEA;EACAe,QAAA,WAAAA,SAAAC,OAAA,EAAAC,qBAAA;IACA,IAAAC,KAAA;IACA,IAAA7C,MAAA;IACA,IAAA8C,QAAA;IACA,IAAAC,UAAA;IACA,IAAAC,QAAA;IACA,IAAAC,UAAA;IACA,IAAAvB,CAAA,GACA,OAAAkB,qBAAA,mBACA,KAAAA,qBAAA,SAAAA,qBAAA,IACA;;IAEA;;IAEA,SAAAM,CAAA,MAAAA,CAAA,GAAAP,OAAA,CAAAQ,MAAA,EAAAD,CAAA;MACAL,KAAA,IAAAF,OAAA,CAAAO,CAAA,EAAA7F,KAAA;MACAyF,QAAA,IAAAH,OAAA,CAAAO,CAAA,EAAA7F,KAAA;MAEA,IAAA+F,UAAA;QACAC,IAAA,EACA,OAAAV,OAAA,CAAAO,CAAA,EAAAG,IAAA,4BAAAC,MAAA,CACAJ,CAAA,IACAP,OAAA,CAAAO,CAAA,EAAAG,IAAA;QACA1E,IAAA;QACA4E,UAAA;QACAC,SAAA;UACApE,IAAA;QACA;QACAuD,OAAA,EAAAA,OAAA,CAAAO,CAAA;QACAO,SAAA;UACAC,QAAA;UACAC,OAAA;UACAjC,CAAA,EAAAA;QACA;MACA;MAEA,WAAAiB,OAAA,CAAAO,CAAA,EAAA3E,SAAA;QACA,IAAAA,SAAA;QAEA,OAAAoE,OAAA,CAAAO,CAAA,EAAA3E,SAAA,CAAAN,KAAA,kBACAM,SAAA,CAAAN,KAAA,GAAA0E,OAAA,CAAAO,CAAA,EAAA3E,SAAA,CAAAN,KAAA,GACA;QACA,OAAA0E,OAAA,CAAAO,CAAA,EAAA3E,SAAA,CAAAqF,OAAA,kBACArF,SAAA,CAAAqF,OAAA,GAAAjB,OAAA,CAAAO,CAAA,EAAA3E,SAAA,CAAAqF,OAAA,GACA;QAEAR,UAAA,CAAA7E,SAAA,GAAAA,SAAA;MACA;MACAyB,MAAA,CAAA6D,IAAA,CAAAT,UAAA;IACA;;IAEA;IACA;IACA,SAAAF,EAAA,MAAAA,EAAA,GAAAlD,MAAA,CAAAmD,MAAA,EAAAD,EAAA;MACAF,QAAA,GAAAD,UAAA,GAAA/C,MAAA,CAAAkD,EAAA,EAAAP,OAAA,CAAAtF,KAAA;MAEA2C,MAAA,CAAAkD,EAAA,EAAAP,OAAA,CAAArB,UAAA,GAAAyB,UAAA,GAAAD,QAAA;MACA9C,MAAA,CAAAkD,EAAA,EAAAP,OAAA,CAAApB,QAAA,GAAAyB,QAAA,GAAAF,QAAA;MACA9C,MAAA,CAAAkD,EAAA,EAAAY,kBAAA,QAAAzC,qBAAA,CACArB,MAAA,CAAAkD,EAAA,EAAAP,OAAA,CAAArB,UAAA,EACAtB,MAAA,CAAAkD,EAAA,EAAAP,OAAA,CAAApB,QAAA,EACA,MACA,OACA,GACAvB,MAAA,CAAAkD,EAAA,EAAAP,OAAA,CAAAtF,KAAA,GAAAwF,KAAA,KACA;MAEAE,UAAA,GAAAC,QAAA;MAEAC,UAAA,CAAAY,IAAA,CAAA7D,MAAA,CAAAkD,EAAA,EAAAG,IAAA;IACA;;IAEA;IACArD,MAAA,CAAA6D,IAAA;MACAR,IAAA;MACA1E,IAAA;MACA4E,UAAA;MACAC,SAAA;QACApE,IAAA;MACA;MACAb,SAAA;QACAqF,OAAA;QACA3F,KAAA;MACA;MACA6F,kBAAA;QACAxB,CAAA;UACAC,GAAA;UACAzC,GAAA,EAAAxC,IAAA,CAAAwE,EAAA;UACAU,IAAA,EAAAlF,IAAA,CAAAwE,EAAA;QACA;QACAW,CAAA;UACAF,GAAA;UACAzC,GAAA,EAAAxC,IAAA,CAAAwE,EAAA;UACAU,IAAA,EAAAlF,IAAA,CAAAwE,EAAA;QACA;QACAvB,CAAA,WAAAA,EAAA+B,CAAA,EAAAG,CAAA;UACA,OAAAnF,IAAA,CAAA4E,GAAA,CAAAO,CAAA,IAAAnF,IAAA,CAAA4E,GAAA,CAAAI,CAAA,IAAAhF,IAAA,CAAA4E,GAAA,CAAAI,CAAA;QACA;QACA9B,CAAA,WAAAA,EAAA8B,CAAA,EAAAG,CAAA;UACA,OAAAnF,IAAA,CAAA4E,GAAA,CAAAO,CAAA,IAAAnF,IAAA,CAAA8E,GAAA,CAAAE,CAAA,IAAAhF,IAAA,CAAA8E,GAAA,CAAAE,CAAA;QACA;QACArB,CAAA,WAAAA,EAAAqB,CAAA,EAAAG,CAAA;UACA,OAAAnF,IAAA,CAAA8E,GAAA,CAAAK,CAAA;QACA;MACA;IACA;IACA;IACA,IAAAjF,MAAA;MACA;MACAW,MAAA;QAAA;QACAiB,IAAA;QACAxB,IAAA;QACAmB,MAAA;QACAgF,OAAA;QACArE,IAAA,EAAAiD,OAAA;QACA9E,SAAA;UACAI,KAAA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACA;MACAO,OAAA;QAAA;QACAK,eAAA;QAAA;QACAhB,SAAA;UACAI,KAAA;QACA;QACAW,SAAA,WAAAA,UAAAwB,MAAA;UACA,IAAAA,MAAA,CAAA4D,UAAA;YACA,UAAAV,MAAA,CAAAlD,MAAA,CAAA4D,UAAA,0HAAAV,MAAA,CACAlD,MAAA,CAAAnC,KAAA,iBAAAqF,MAAA,CACAT,KAAA,QACAzC,MAAA,CAAA4D,UAAA,qBAEA,CAAAxG,MAAA,CAAAwC,MAAA,CAAAI,MAAA,CAAA6D,WAAA,EAAAtB,OAAA,CAAAtF,KAAA,GAAAwF,KAAA,QAAAqB,OAAA;UAEA;QACA;MACA;MACAC,OAAA;QACA5B,GAAA;QACAzC,GAAA;MACA;MACAsE,OAAA;QACA7B,GAAA;QACAzC,GAAA;MACA;MACAuE,OAAA;QACA9B,GAAA;QACAzC,GAAA;MACA;MACAwE,MAAA;QACAlF,IAAA;QACAmF,SAAA;QACA;QACA3G,IAAA;QACAmB,MAAA;QACAyF,WAAA;UACA;UACA;UACA;UACAC,iBAAA;UACAC,eAAA;UACAC,cAAA;UACAC,UAAA;UACAC,eAAA;UACA;QACA;MACA;MACA7E,MAAA,EAAAA;IACA;IACA,OAAAxC,MAAA;EACA;AACA"}]}