{"remainingRequest":"C:\\Users\\熊镇锋\\Desktop\\wit\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\熊镇锋\\Desktop\\wit\\src\\components\\module\\charts.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\熊镇锋\\Desktop\\wit\\src\\components\\module\\charts.vue","mtime":1704723600661},{"path":"C:\\Users\\熊镇锋\\Desktop\\wit\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\熊镇锋\\Desktop\\wit\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\Users\\熊镇锋\\Desktop\\wit\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\熊镇锋\\Desktop\\wit\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport Vue from 'vue';\r\nimport \"echarts-gl\";\r\nconst that = new Vue()\r\nexport default {\r\n  /**\r\n   * 绘制3D柱图\r\n   * @param {string[]} xData 横坐标数组\r\n   * @param {string[]} list 坐标数据\r\n   * @returns\r\n   */\r\n  cylinderOption(xData, list) {\r\n    let maxNum = 2;\r\n    list.forEach(item => {\r\n      maxNum = item.value > maxNum ? Math.ceil(item.value) : maxNum;\r\n    })\r\n    const option = {\r\n      title: {\r\n        text: \"单位：台\",\r\n        top: \"2%\",\r\n        left: \"2%\",\r\n        textStyle: {\r\n          fontSize: that.$tools.getFitSize(1),\r\n          color: \"#fff\",\r\n          fontWeight: \"normal\",\r\n        },\r\n      },\r\n      legend: {\r\n        top: \"2%\",\r\n        icon: \"roundRect\",\r\n        textStyle: {\r\n          color: \"#97AFD8\",\r\n          fontSize: that.$tools.getFitSize(1),\r\n        },\r\n        itemWidth: that.$tools.getFitSize(1.28),\r\n        itemHeight: that.$tools.getFitSize(0.5),\r\n        itemStyle: {\r\n          color: \"#91CAFF\",\r\n        },\r\n      },\r\n      tooltip: {\r\n        trigger: \"item\",\r\n        axisPointer: {\r\n          type: \"shadow\",\r\n        },\r\n        formatter: \"{b} : {c}台\", //显示的内容\r\n        backgroundColor: \"rgba(21, 45, 85, 0.6)\", //背景颜色（此时为默认色）\r\n        textStyle: {\r\n          color: \"#fff\",\r\n        },\r\n      },\r\n      grid: {\r\n        top: \"15%\",\r\n        bottom: \"5%\",\r\n        right: \"3%\",\r\n        left: \"3%\",\r\n        containLabel: true,\r\n      },\r\n      xAxis: {\r\n        type: \"category\",\r\n        axisTick: {\r\n          show: false,\r\n        },\r\n        axisLine: {\r\n          show: true,\r\n          lineStyle: {\r\n            color: \"rgba(41, 121, 255, 0.2)\",\r\n          },\r\n        },\r\n        axisLabel: {\r\n          interval: 0,\r\n          color: \"#B5C5D4\",\r\n          margin: 14, //边距\r\n          fontSize: that.$tools.getFitSize(0.86),\r\n        },\r\n        data: xData,\r\n      },\r\n      yAxis: {\r\n        type: \"value\",\r\n        splitLine: {\r\n          show: false,\r\n        },\r\n        axisTick: {\r\n          show: false,\r\n        },\r\n        axisLine: { //坐标轴线配置\r\n          show: true,\r\n          lineStyle: {\r\n            color: \"rgba(41, 121, 255, 0.2)\",\r\n          },\r\n        },\r\n        interval: maxNum <= 2 ? 1 : undefined, //刻度值间隔\r\n        max: maxNum <= 2 ? maxNum : undefined,  //最大刻度值\r\n        axisLabel: {  //坐标轴值配置\r\n          formatter: function (value) {  // 这里设置 Y 轴的单位\r\n            return value;\r\n          },\r\n          color: \"rgba(255, 255, 255, 0.6)\",\r\n          fontSize: that.$tools.getFitSize(0.86),\r\n        },\r\n        splitNumber: 4,\r\n      },\r\n      color: [\"#2b9cf9\"],\r\n      series: [\r\n        {\r\n          // name: \"圆柱部分\",\r\n          type: \"bar\", //bar 柱状图\r\n          // barWidth: that.$tools.getFitSize(1.42),\r\n          barWidth: that.$tools.getFitSize(4),\r\n          barGap: \"0%\",\r\n          itemStyle: {\r\n            //柱状样式\r\n            normal: {\r\n              color: function (params) {\r\n                let colorList = [\r\n                  {\r\n                    top: \"rgba(186, 108, 238, 0.7)\",\r\n                    bottom: \"rgba(186, 108, 238, 0.1)\",\r\n                  },\r\n                  {\r\n                    top: \"rgba(60, 119, 228, 0.7)\",\r\n                    bottom: \"rgba(60, 119, 228, 0.1)\",\r\n                  },\r\n                  {\r\n                    top: \"rgba(198, 158, 71, 0.7)\",\r\n                    bottom: \"rgba(198, 158, 71, 0.1)\",\r\n                  },\r\n                ];\r\n                let colorItem = {\r\n                  x: 0,\r\n                  y: 0,\r\n                  x2: 0,\r\n                  y2: 1,\r\n                  type: \"linear\",\r\n                  global: false,\r\n                  colorStops: [\r\n                    {\r\n                      //第一节下面\r\n                      offset: 0,\r\n                      color: colorList[params.dataIndex].top,\r\n                    },\r\n                    {\r\n                      offset: 1,\r\n                      color: colorList[params.dataIndex].bottom,\r\n                    },\r\n                  ],\r\n                };\r\n                return colorItem;\r\n              },\r\n            },\r\n          },\r\n          data: list,\r\n        },\r\n        {\r\n          // name: \"顶部截面\",\r\n          type: \"pictorialBar\", //pictorialBar 象形柱图\r\n          symbolSize: [that.$tools.getFitSize(4), 12], //调整截面形状\r\n          symbolOffset: [0, -5],\r\n          z: 12,\r\n          symbolPosition: \"end\", //图形的位置 'start'：图形边缘与柱子开始的地方内切。'end'：图形边缘与柱子结束的地方内切。'center'：图形在柱子里居中。\r\n          itemStyle: {\r\n            normal: {\r\n              color: function (params) {\r\n                let colorList = [\r\n                  \"rgba(186, 108, 238)\",\r\n                  \"rgba(60, 119, 228)\",\r\n                  \"rgba(198, 158, 71)\",\r\n                ];\r\n                let colorItem = colorList[params.dataIndex];\r\n                return colorItem;\r\n              },\r\n            },\r\n          },\r\n          data: list,\r\n        },\r\n        {\r\n          // name: \"底部截面\",\r\n          type: \"pictorialBar\", //pictorialBar 象形柱图\r\n          symbolSize: [that.$tools.getFitSize(4), 12], //调整截面形状\r\n          z: 12,\r\n          itemStyle: {\r\n            normal: {\r\n              color: function (params) {\r\n                let colorList = [\r\n                  \"rgba(186, 108, 238, 0.5)\",\r\n                  \"rgba(60, 119, 228, 0.5)\",\r\n                  \"rgba(198, 158, 71, 0.5)\",\r\n                ];\r\n                let colorItem = colorList[params.dataIndex];\r\n                return colorItem;\r\n              },\r\n            },\r\n          },\r\n          // 实现数字展示在柱状图\r\n          label: {\r\n            show: true,\r\n            position: \"top\",\r\n            fontSize: that.$tools.getFitSize(1.28),\r\n            color: \"#2DB1EF\",\r\n            fontWeight: \"bold\",\r\n            offset: [0, -10],\r\n            formatter: \"{c}\", //添加单位\r\n          },\r\n          data: list,\r\n        },\r\n      ],\r\n    };\r\n    return option;\r\n  },\r\n\r\n  // 生成扇形的曲面参数方程，用于 series-surface.parametricEquation\r\n  getParametricEquation(startRatio, endRatio, isSelected, isHovered, k, h) {\r\n    // 计算\r\n    let midRatio = (startRatio + endRatio) / 2;\r\n\r\n    let startRadian = startRatio * Math.PI * 2;\r\n    let endRadian = endRatio * Math.PI * 2;\r\n    let midRadian = midRatio * Math.PI * 2;\r\n\r\n    // 如果只有一个扇形，则不实现选中效果。\r\n    // if (startRatio === 0 && endRatio === 1) {\r\n    //     isSelected = false;\r\n    // }\r\n    isSelected = false;\r\n    // 通过扇形内径/外径的值，换算出辅助参数 k（默认值 1/3）\r\n    k = typeof k !== 'undefined' ? k : 1 / 3;\r\n\r\n    // 计算选中效果分别在 x 轴、y 轴方向上的位移（未选中，则位移均为 0）\r\n    let offsetX = isSelected ? Math.sin(midRadian) * 0.1 : 0;\r\n    let offsetY = isSelected ? Math.cos(midRadian) * 0.1 : 0;\r\n\r\n    // 计算高亮效果的放大比例（未高亮，则比例为 1）\r\n    let hoverRate = isHovered ? 1.05 : 1;\r\n\r\n    // 返回曲面参数方程\r\n    return {\r\n      u: {\r\n        min: -Math.PI,\r\n        max: Math.PI * 3,\r\n        step: Math.PI / 32,\r\n      },\r\n\r\n      v: {\r\n        min: 0,\r\n        max: Math.PI * 2,\r\n        step: Math.PI / 20,\r\n      },\r\n\r\n      x: function (u, v) {\r\n        if (u < startRadian) {\r\n          return offsetX + Math.cos(startRadian) * (1 + Math.cos(v) * k) * hoverRate;\r\n        }\r\n        if (u > endRadian) {\r\n          return offsetX + Math.cos(endRadian) * (1 + Math.cos(v) * k) * hoverRate;\r\n        }\r\n        return offsetX + Math.cos(u) * (1 + Math.cos(v) * k) * hoverRate;\r\n      },\r\n\r\n      y: function (u, v) {\r\n        if (u < startRadian) {\r\n          return offsetY + Math.sin(startRadian) * (1 + Math.cos(v) * k) * hoverRate;\r\n        }\r\n        if (u > endRadian) {\r\n          return offsetY + Math.sin(endRadian) * (1 + Math.cos(v) * k) * hoverRate;\r\n        }\r\n        return offsetY + Math.sin(u) * (1 + Math.cos(v) * k) * hoverRate;\r\n      },\r\n\r\n      z: function (u, v) {\r\n        if (u < -Math.PI * 0.5) {\r\n          return Math.sin(u);\r\n        }\r\n        if (u > Math.PI * 2.5) {\r\n          return Math.sin(u) * h * 0.1;\r\n        }\r\n        return Math.sin(v) > 0 ? 1 * h * 0.1 : -1;\r\n      },\r\n    };\r\n  },\r\n\r\n  // 生成模拟 3D 饼图的配置项\r\n  getPie3D(pieData, internalDiameterRatio) {\r\n    let total = 0;\r\n    let series = [];\r\n    let sumValue = 0;\r\n    let startValue = 0;\r\n    let endValue = 0;\r\n    let legendData = [];\r\n    let k =\r\n      typeof internalDiameterRatio !== \"undefined\"\r\n        ? (1 - internalDiameterRatio) / (1 + internalDiameterRatio)\r\n        : 1 / 3;\r\n\r\n    // 为每一个饼图数据，生成一个 series-surface 配置\r\n\r\n    for (let i = 0; i < pieData.length; i++) {\r\n      total += pieData[i].value\r\n      sumValue += pieData[i].value;\r\n\r\n      let seriesItem = {\r\n        name:\r\n          typeof pieData[i].name === \"undefined\"\r\n            ? `series${i}`\r\n            : pieData[i].name,\r\n        type: \"surface\",\r\n        parametric: true,\r\n        wireframe: {\r\n          show: false,\r\n        },\r\n        pieData: pieData[i],\r\n        pieStatus: {\r\n          selected: false,\r\n          hovered: false,\r\n          k: k,\r\n        },\r\n      };\r\n\r\n      if (typeof pieData[i].itemStyle != \"undefined\") {\r\n        let itemStyle = {};\r\n\r\n        typeof pieData[i].itemStyle.color != \"undefined\"\r\n          ? (itemStyle.color = pieData[i].itemStyle.color)\r\n          : null;\r\n        typeof pieData[i].itemStyle.opacity != \"undefined\"\r\n          ? (itemStyle.opacity = pieData[i].itemStyle.opacity)\r\n          : null;\r\n\r\n        seriesItem.itemStyle = itemStyle;\r\n      }\r\n      series.push(seriesItem);\r\n    }\r\n\r\n    // 使用上一次遍历时，计算出的数据和 sumValue，调用 getParametricEquation 函数，\r\n    // 向每个 series-surface 传入不同的参数方程 series-surface.parametricEquation，也就是实现每一个扇形。\r\n    for (let i = 0; i < series.length; i++) {\r\n      endValue = startValue + series[i].pieData.value;\r\n\r\n      series[i].pieData.startRatio = startValue / sumValue;\r\n      series[i].pieData.endRatio = endValue / sumValue;\r\n      series[i].parametricEquation = this.getParametricEquation(\r\n        series[i].pieData.startRatio,\r\n        series[i].pieData.endRatio,\r\n        true,\r\n        false,\r\n        1,\r\n        series[i].pieData.value / total * 20\r\n      );\r\n\r\n      startValue = endValue;\r\n\r\n      legendData.push(series[i].name);\r\n    }\r\n\r\n    // 补充一个透明的圆环，用于支撑高亮功能的近似实现。\r\n    series.push({\r\n      name: \"mouseoutSeries\",\r\n      type: \"surface\",\r\n      parametric: true,\r\n      wireframe: {\r\n        show: false,\r\n      },\r\n      itemStyle: {\r\n        opacity: 1,\r\n        color: \"rgba(18,236,252,.5)\",\r\n      },\r\n      parametricEquation: {\r\n        u: {\r\n          min: 0,\r\n          max: Math.PI * 2,\r\n          step: Math.PI / 20,\r\n        },\r\n        v: {\r\n          min: 0,\r\n          max: Math.PI,\r\n          step: Math.PI / 1.4,\r\n        },\r\n        x: function (u, v) {\r\n          return Math.sin(v) * Math.sin(u) + Math.sin(u);\r\n        },\r\n        y: function (u, v) {\r\n          return Math.sin(v) * Math.cos(u) + Math.cos(u);\r\n        },\r\n        z: function (u, v) {\r\n          return Math.cos(v) > 0 ? 0.1 : -0.1;\r\n        },\r\n      },\r\n    });\r\n    // 准备待返回的配置项，把准备好的 legendData、series 传入。\r\n    let option = {\r\n      // animation: false,\r\n      legend: { //分类标识\r\n        show: true,\r\n        left: 'center',\r\n        bottom: \"10\",\r\n        itemGap: 20,\r\n        data: pieData,\r\n        textStyle: {\r\n          color: 'white'\r\n        },\r\n        // formatter: function (params) {\r\n        //   for (let i = 0; i < pieData.length; i++) {\r\n        //     if (pieData[i].name === params) {\r\n        //       return params + ' : ' + (pieData[i].value / total * 100).toFixed(2) + '%'\r\n        //     }\r\n        //   }\r\n        // }\r\n      },\r\n      tooltip: { //鼠标指向时提示\r\n        backgroundColor: \"rgba(21, 45, 85, 0.6)\", //背景颜色（此时为默认色）\r\n        textStyle: {\r\n          color: 'white'\r\n        },\r\n        formatter: (params) => {\r\n          if (params.seriesName !== \"mouseoutSeries\") {\r\n            return `${params.seriesName\r\n              }<br/><span style=\"display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:${params.color\r\n              };\"></span>${total == 0 ? \r\n                params.seriesName=='合格' ? 100 : 0 \r\n                :\r\n                (option.series[params.seriesIndex].pieData.value / total * 100).toFixed(2)\r\n              }%`;\r\n          }\r\n        },\r\n      },\r\n      xAxis3D: {\r\n        min: -1.3,\r\n        max: 1.3,\r\n      },\r\n      yAxis3D: {\r\n        min: -1.3,\r\n        max: 1.3,\r\n      },\r\n      zAxis3D: {\r\n        min: -1.3,\r\n        max: 1.3,\r\n      },\r\n      grid3D: {\r\n        show: false,\r\n        boxHeight: 10,\r\n        // top: '30%',\r\n        left: \"center\",\r\n        bottom: \"center\",\r\n        viewControl: {\r\n          //3d效果可以放大、旋转等，请自己去查看官方配置\r\n          // alpha: 20,\r\n          // beta: 40,\r\n          rotateSensitivity: 0,\r\n          zoomSensitivity: 0,\r\n          panSensitivity: 0,\r\n          autoRotate: true,\r\n          autoRotateSpeed: 72,\r\n          // autoRotateAfterStill: 10\r\n        },\r\n      },\r\n      series: series,\r\n    };\r\n    return option;\r\n  },\r\n};\r\n",{"version":3,"sources":["charts.vue"],"names":[],"mappingsfile":"charts.vue","sourceRoot":"src/components/module","sourcesContent":["<script>\r\nimport Vue from 'vue';\r\nimport \"echarts-gl\";\r\nconst that = new Vue()\r\nexport default {\r\n  /**\r\n   * 绘制3D柱图\r\n   * @param {string[]} xData 横坐标数组\r\n   * @param {string[]} list 坐标数据\r\n   * @returns\r\n   */\r\n  cylinderOption(xData, list) {\r\n    let maxNum = 2;\r\n    list.forEach(item => {\r\n      maxNum = item.value > maxNum ? Math.ceil(item.value) : maxNum;\r\n    })\r\n    const option = {\r\n      title: {\r\n        text: \"单位：台\",\r\n        top: \"2%\",\r\n        left: \"2%\",\r\n        textStyle: {\r\n          fontSize: that.$tools.getFitSize(1),\r\n          color: \"#fff\",\r\n          fontWeight: \"normal\",\r\n        },\r\n      },\r\n      legend: {\r\n        top: \"2%\",\r\n        icon: \"roundRect\",\r\n        textStyle: {\r\n          color: \"#97AFD8\",\r\n          fontSize: that.$tools.getFitSize(1),\r\n        },\r\n        itemWidth: that.$tools.getFitSize(1.28),\r\n        itemHeight: that.$tools.getFitSize(0.5),\r\n        itemStyle: {\r\n          color: \"#91CAFF\",\r\n        },\r\n      },\r\n      tooltip: {\r\n        trigger: \"item\",\r\n        axisPointer: {\r\n          type: \"shadow\",\r\n        },\r\n        formatter: \"{b} : {c}台\", //显示的内容\r\n        backgroundColor: \"rgba(21, 45, 85, 0.6)\", //背景颜色（此时为默认色）\r\n        textStyle: {\r\n          color: \"#fff\",\r\n        },\r\n      },\r\n      grid: {\r\n        top: \"15%\",\r\n        bottom: \"5%\",\r\n        right: \"3%\",\r\n        left: \"3%\",\r\n        containLabel: true,\r\n      },\r\n      xAxis: {\r\n        type: \"category\",\r\n        axisTick: {\r\n          show: false,\r\n        },\r\n        axisLine: {\r\n          show: true,\r\n          lineStyle: {\r\n            color: \"rgba(41, 121, 255, 0.2)\",\r\n          },\r\n        },\r\n        axisLabel: {\r\n          interval: 0,\r\n          color: \"#B5C5D4\",\r\n          margin: 14, //边距\r\n          fontSize: that.$tools.getFitSize(0.86),\r\n        },\r\n        data: xData,\r\n      },\r\n      yAxis: {\r\n        type: \"value\",\r\n        splitLine: {\r\n          show: false,\r\n        },\r\n        axisTick: {\r\n          show: false,\r\n        },\r\n        axisLine: { //坐标轴线配置\r\n          show: true,\r\n          lineStyle: {\r\n            color: \"rgba(41, 121, 255, 0.2)\",\r\n          },\r\n        },\r\n        interval: maxNum <= 2 ? 1 : undefined, //刻度值间隔\r\n        max: maxNum <= 2 ? maxNum : undefined,  //最大刻度值\r\n        axisLabel: {  //坐标轴值配置\r\n          formatter: function (value) {  // 这里设置 Y 轴的单位\r\n            return value;\r\n          },\r\n          color: \"rgba(255, 255, 255, 0.6)\",\r\n          fontSize: that.$tools.getFitSize(0.86),\r\n        },\r\n        splitNumber: 4,\r\n      },\r\n      color: [\"#2b9cf9\"],\r\n      series: [\r\n        {\r\n          // name: \"圆柱部分\",\r\n          type: \"bar\", //bar 柱状图\r\n          // barWidth: that.$tools.getFitSize(1.42),\r\n          barWidth: that.$tools.getFitSize(4),\r\n          barGap: \"0%\",\r\n          itemStyle: {\r\n            //柱状样式\r\n            normal: {\r\n              color: function (params) {\r\n                let colorList = [\r\n                  {\r\n                    top: \"rgba(186, 108, 238, 0.7)\",\r\n                    bottom: \"rgba(186, 108, 238, 0.1)\",\r\n                  },\r\n                  {\r\n                    top: \"rgba(60, 119, 228, 0.7)\",\r\n                    bottom: \"rgba(60, 119, 228, 0.1)\",\r\n                  },\r\n                  {\r\n                    top: \"rgba(198, 158, 71, 0.7)\",\r\n                    bottom: \"rgba(198, 158, 71, 0.1)\",\r\n                  },\r\n                ];\r\n                let colorItem = {\r\n                  x: 0,\r\n                  y: 0,\r\n                  x2: 0,\r\n                  y2: 1,\r\n                  type: \"linear\",\r\n                  global: false,\r\n                  colorStops: [\r\n                    {\r\n                      //第一节下面\r\n                      offset: 0,\r\n                      color: colorList[params.dataIndex].top,\r\n                    },\r\n                    {\r\n                      offset: 1,\r\n                      color: colorList[params.dataIndex].bottom,\r\n                    },\r\n                  ],\r\n                };\r\n                return colorItem;\r\n              },\r\n            },\r\n          },\r\n          data: list,\r\n        },\r\n        {\r\n          // name: \"顶部截面\",\r\n          type: \"pictorialBar\", //pictorialBar 象形柱图\r\n          symbolSize: [that.$tools.getFitSize(4), 12], //调整截面形状\r\n          symbolOffset: [0, -5],\r\n          z: 12,\r\n          symbolPosition: \"end\", //图形的位置 'start'：图形边缘与柱子开始的地方内切。'end'：图形边缘与柱子结束的地方内切。'center'：图形在柱子里居中。\r\n          itemStyle: {\r\n            normal: {\r\n              color: function (params) {\r\n                let colorList = [\r\n                  \"rgba(186, 108, 238)\",\r\n                  \"rgba(60, 119, 228)\",\r\n                  \"rgba(198, 158, 71)\",\r\n                ];\r\n                let colorItem = colorList[params.dataIndex];\r\n                return colorItem;\r\n              },\r\n            },\r\n          },\r\n          data: list,\r\n        },\r\n        {\r\n          // name: \"底部截面\",\r\n          type: \"pictorialBar\", //pictorialBar 象形柱图\r\n          symbolSize: [that.$tools.getFitSize(4), 12], //调整截面形状\r\n          z: 12,\r\n          itemStyle: {\r\n            normal: {\r\n              color: function (params) {\r\n                let colorList = [\r\n                  \"rgba(186, 108, 238, 0.5)\",\r\n                  \"rgba(60, 119, 228, 0.5)\",\r\n                  \"rgba(198, 158, 71, 0.5)\",\r\n                ];\r\n                let colorItem = colorList[params.dataIndex];\r\n                return colorItem;\r\n              },\r\n            },\r\n          },\r\n          // 实现数字展示在柱状图\r\n          label: {\r\n            show: true,\r\n            position: \"top\",\r\n            fontSize: that.$tools.getFitSize(1.28),\r\n            color: \"#2DB1EF\",\r\n            fontWeight: \"bold\",\r\n            offset: [0, -10],\r\n            formatter: \"{c}\", //添加单位\r\n          },\r\n          data: list,\r\n        },\r\n      ],\r\n    };\r\n    return option;\r\n  },\r\n\r\n  // 生成扇形的曲面参数方程，用于 series-surface.parametricEquation\r\n  getParametricEquation(startRatio, endRatio, isSelected, isHovered, k, h) {\r\n    // 计算\r\n    let midRatio = (startRatio + endRatio) / 2;\r\n\r\n    let startRadian = startRatio * Math.PI * 2;\r\n    let endRadian = endRatio * Math.PI * 2;\r\n    let midRadian = midRatio * Math.PI * 2;\r\n\r\n    // 如果只有一个扇形，则不实现选中效果。\r\n    // if (startRatio === 0 && endRatio === 1) {\r\n    //     isSelected = false;\r\n    // }\r\n    isSelected = false;\r\n    // 通过扇形内径/外径的值，换算出辅助参数 k（默认值 1/3）\r\n    k = typeof k !== 'undefined' ? k : 1 / 3;\r\n\r\n    // 计算选中效果分别在 x 轴、y 轴方向上的位移（未选中，则位移均为 0）\r\n    let offsetX = isSelected ? Math.sin(midRadian) * 0.1 : 0;\r\n    let offsetY = isSelected ? Math.cos(midRadian) * 0.1 : 0;\r\n\r\n    // 计算高亮效果的放大比例（未高亮，则比例为 1）\r\n    let hoverRate = isHovered ? 1.05 : 1;\r\n\r\n    // 返回曲面参数方程\r\n    return {\r\n      u: {\r\n        min: -Math.PI,\r\n        max: Math.PI * 3,\r\n        step: Math.PI / 32,\r\n      },\r\n\r\n      v: {\r\n        min: 0,\r\n        max: Math.PI * 2,\r\n        step: Math.PI / 20,\r\n      },\r\n\r\n      x: function (u, v) {\r\n        if (u < startRadian) {\r\n          return offsetX + Math.cos(startRadian) * (1 + Math.cos(v) * k) * hoverRate;\r\n        }\r\n        if (u > endRadian) {\r\n          return offsetX + Math.cos(endRadian) * (1 + Math.cos(v) * k) * hoverRate;\r\n        }\r\n        return offsetX + Math.cos(u) * (1 + Math.cos(v) * k) * hoverRate;\r\n      },\r\n\r\n      y: function (u, v) {\r\n        if (u < startRadian) {\r\n          return offsetY + Math.sin(startRadian) * (1 + Math.cos(v) * k) * hoverRate;\r\n        }\r\n        if (u > endRadian) {\r\n          return offsetY + Math.sin(endRadian) * (1 + Math.cos(v) * k) * hoverRate;\r\n        }\r\n        return offsetY + Math.sin(u) * (1 + Math.cos(v) * k) * hoverRate;\r\n      },\r\n\r\n      z: function (u, v) {\r\n        if (u < -Math.PI * 0.5) {\r\n          return Math.sin(u);\r\n        }\r\n        if (u > Math.PI * 2.5) {\r\n          return Math.sin(u) * h * 0.1;\r\n        }\r\n        return Math.sin(v) > 0 ? 1 * h * 0.1 : -1;\r\n      },\r\n    };\r\n  },\r\n\r\n  // 生成模拟 3D 饼图的配置项\r\n  getPie3D(pieData, internalDiameterRatio) {\r\n    let total = 0;\r\n    let series = [];\r\n    let sumValue = 0;\r\n    let startValue = 0;\r\n    let endValue = 0;\r\n    let legendData = [];\r\n    let k =\r\n      typeof internalDiameterRatio !== \"undefined\"\r\n        ? (1 - internalDiameterRatio) / (1 + internalDiameterRatio)\r\n        : 1 / 3;\r\n\r\n    // 为每一个饼图数据，生成一个 series-surface 配置\r\n\r\n    for (let i = 0; i < pieData.length; i++) {\r\n      total += pieData[i].value\r\n      sumValue += pieData[i].value;\r\n\r\n      let seriesItem = {\r\n        name:\r\n          typeof pieData[i].name === \"undefined\"\r\n            ? `series${i}`\r\n            : pieData[i].name,\r\n        type: \"surface\",\r\n        parametric: true,\r\n        wireframe: {\r\n          show: false,\r\n        },\r\n        pieData: pieData[i],\r\n        pieStatus: {\r\n          selected: false,\r\n          hovered: false,\r\n          k: k,\r\n        },\r\n      };\r\n\r\n      if (typeof pieData[i].itemStyle != \"undefined\") {\r\n        let itemStyle = {};\r\n\r\n        typeof pieData[i].itemStyle.color != \"undefined\"\r\n          ? (itemStyle.color = pieData[i].itemStyle.color)\r\n          : null;\r\n        typeof pieData[i].itemStyle.opacity != \"undefined\"\r\n          ? (itemStyle.opacity = pieData[i].itemStyle.opacity)\r\n          : null;\r\n\r\n        seriesItem.itemStyle = itemStyle;\r\n      }\r\n      series.push(seriesItem);\r\n    }\r\n\r\n    // 使用上一次遍历时，计算出的数据和 sumValue，调用 getParametricEquation 函数，\r\n    // 向每个 series-surface 传入不同的参数方程 series-surface.parametricEquation，也就是实现每一个扇形。\r\n    for (let i = 0; i < series.length; i++) {\r\n      endValue = startValue + series[i].pieData.value;\r\n\r\n      series[i].pieData.startRatio = startValue / sumValue;\r\n      series[i].pieData.endRatio = endValue / sumValue;\r\n      series[i].parametricEquation = this.getParametricEquation(\r\n        series[i].pieData.startRatio,\r\n        series[i].pieData.endRatio,\r\n        true,\r\n        false,\r\n        1,\r\n        series[i].pieData.value / total * 20\r\n      );\r\n\r\n      startValue = endValue;\r\n\r\n      legendData.push(series[i].name);\r\n    }\r\n\r\n    // 补充一个透明的圆环，用于支撑高亮功能的近似实现。\r\n    series.push({\r\n      name: \"mouseoutSeries\",\r\n      type: \"surface\",\r\n      parametric: true,\r\n      wireframe: {\r\n        show: false,\r\n      },\r\n      itemStyle: {\r\n        opacity: 1,\r\n        color: \"rgba(18,236,252,.5)\",\r\n      },\r\n      parametricEquation: {\r\n        u: {\r\n          min: 0,\r\n          max: Math.PI * 2,\r\n          step: Math.PI / 20,\r\n        },\r\n        v: {\r\n          min: 0,\r\n          max: Math.PI,\r\n          step: Math.PI / 1.4,\r\n        },\r\n        x: function (u, v) {\r\n          return Math.sin(v) * Math.sin(u) + Math.sin(u);\r\n        },\r\n        y: function (u, v) {\r\n          return Math.sin(v) * Math.cos(u) + Math.cos(u);\r\n        },\r\n        z: function (u, v) {\r\n          return Math.cos(v) > 0 ? 0.1 : -0.1;\r\n        },\r\n      },\r\n    });\r\n    // 准备待返回的配置项，把准备好的 legendData、series 传入。\r\n    let option = {\r\n      // animation: false,\r\n      legend: { //分类标识\r\n        show: true,\r\n        left: 'center',\r\n        bottom: \"10\",\r\n        itemGap: 20,\r\n        data: pieData,\r\n        textStyle: {\r\n          color: 'white'\r\n        },\r\n        // formatter: function (params) {\r\n        //   for (let i = 0; i < pieData.length; i++) {\r\n        //     if (pieData[i].name === params) {\r\n        //       return params + ' : ' + (pieData[i].value / total * 100).toFixed(2) + '%'\r\n        //     }\r\n        //   }\r\n        // }\r\n      },\r\n      tooltip: { //鼠标指向时提示\r\n        backgroundColor: \"rgba(21, 45, 85, 0.6)\", //背景颜色（此时为默认色）\r\n        textStyle: {\r\n          color: 'white'\r\n        },\r\n        formatter: (params) => {\r\n          if (params.seriesName !== \"mouseoutSeries\") {\r\n            return `${params.seriesName\r\n              }<br/><span style=\"display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:${params.color\r\n              };\"></span>${total == 0 ? \r\n                params.seriesName=='合格' ? 100 : 0 \r\n                :\r\n                (option.series[params.seriesIndex].pieData.value / total * 100).toFixed(2)\r\n              }%`;\r\n          }\r\n        },\r\n      },\r\n      xAxis3D: {\r\n        min: -1.3,\r\n        max: 1.3,\r\n      },\r\n      yAxis3D: {\r\n        min: -1.3,\r\n        max: 1.3,\r\n      },\r\n      zAxis3D: {\r\n        min: -1.3,\r\n        max: 1.3,\r\n      },\r\n      grid3D: {\r\n        show: false,\r\n        boxHeight: 10,\r\n        // top: '30%',\r\n        left: \"center\",\r\n        bottom: \"center\",\r\n        viewControl: {\r\n          //3d效果可以放大、旋转等，请自己去查看官方配置\r\n          // alpha: 20,\r\n          // beta: 40,\r\n          rotateSensitivity: 0,\r\n          zoomSensitivity: 0,\r\n          panSensitivity: 0,\r\n          autoRotate: true,\r\n          autoRotateSpeed: 72,\r\n          // autoRotateAfterStill: 10\r\n        },\r\n      },\r\n      series: series,\r\n    };\r\n    return option;\r\n  },\r\n};\r\n</script>\r\n"]}]}